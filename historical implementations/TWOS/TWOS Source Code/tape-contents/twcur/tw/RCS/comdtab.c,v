head     1.15;
branch   ;
access   ;
symbols  TW2_7:1.15 TW2_6:1.14 TW2_5_1:1.11 TW2_5:1.7 TW2_4_2:1.2 TW2_4_1:1.1 TW2_4:1.1;
locks    ; strict;
comment  @ * @;


1.15
date     91.12.27.08.41.24;  author reiher;  state Rel;
branches ;
next     1.14;

1.14
date     91.11.06.11.08.46;  author configtw;  state Rel;
branches ;
next     1.13;

1.13
date     91.11.04.10.42.40;  author pls;  state Dev;
branches ;
next     1.12;

1.12
date     91.11.01.09.29.27;  author reiher;  state Dev;
branches ;
next     1.11;

1.11
date     91.07.22.15.43.53;  author configtw;  state Rel;
branches ;
next     1.10;

1.10
date     91.07.22.14.33.12;  author configtw;  state Dev;
branches ;
next     1.9;

1.9
date     91.07.17.15.07.27;  author judy;  state Dev;
branches ;
next     1.8;

1.8
date     91.07.09.15.20.09;  author steve;  state Dev;
branches ;
next     1.7;

1.7
date     91.06.03.12.23.45;  author configtw;  state Rel;
branches ;
next     1.6;

1.6
date     91.05.31.12.49.20;  author pls;  state Dev;
branches ;
next     1.5;

1.5
date     91.04.01.15.34.51;  author reiher;  state Dev;
branches ;
next     1.4;

1.4
date     91.03.28.09.59.18;  author configtw;  state Dev;
branches ;
next     1.3;

1.3
date     91.03.26.09.08.48;  author pls;  state Dev;
branches ;
next     1.2;

1.2
date     90.11.27.09.29.24;  author csupport;  state Rel;
branches ;
next     1.1;

1.1
date     90.08.07.15.38.03;  author configtw;  state Rel;
branches ;
next     ;


desc
@configuration table handler
@


1.15
log
@Added tester commands for throttling and ratio migration
@
text
@/*      Copyright (C) 1989, 1991, California Institute of Technology.
		U. S. Government Sponsorship under NASA Contract NAS7-918
		is acknowledged.        */

/*
 * $Log:	comdtab.c,v $
 * Revision 1.14  91/11/06  11:08:46  configtw
 * Fix compile errors.
 * 
 * Revision 1.13  91/11/04  10:42:40  pls
 * Add ALLOWNOW and MAXMSGPOOL.
 * 
 * Revision 1.12  91/11/01  09:29:27  reiher
 * Added tester commands for throttling, critical path, and new dynamic load 
 * management capabilities (PLR)
 * 
 * Revision 1.11  91/07/22  15:43:53  configtw
 * Fix misspelling of MARK3.
 * 
 * Revision 1.10  91/07/22  14:33:12  configtw
 * Remove recv_q_limit stuff for Mark3.
 * 
 * Revision 1.9  91/07/17  15:07:27  judy
 * New copyright notice.
 * 
 * Revision 1.8  91/07/09  15:20:09  steve
 * Added set receive q limit, set object timing mode and changable notabug
 * 
 * Revision 1.7  91/06/03  12:23:45  configtw
 * Tab conversion.
 * 
 * Revision 1.6  91/05/31  12:49:20  pls
 * Add LISTHDR command.
 * 
 * Revision 1.5  91/04/01  15:34:51  reiher
 * Added a few commands to tester for dynamic load management.  They include
 * a graphics toggle, a phase create command, a command to dump ocbs by
 * address, and a command to show the contents of the type table.
 * 
 * Revision 1.4  91/03/28  09:59:18  configtw
 * Change timeoff() to tw_timeoff()--conflict with Sun libraries.
 * 
 * Revision 1.3  91/03/26  09:08:48  pls
 * 1.  Remove GVTPOS.
 * 2.  Add HOGLOG.
 * 3.  Add SCHEDULE as synonym for TELL.
 * 4.  Add TYPEINIT.
 * 5.  Change DELFILE so it doesn't broadcast.
 * 
 * Revision 1.2  90/11/27  09:29:24  csupport
 * add staddrt command (plr)
 * 
 * Revision 1.1  90/08/07  15:38:03  configtw
 * Initial revision
 * 
*/
char comdtab_id [] = "@@(#)comdtab.c     1.53\t10/2/89\t14:12:10\tTIMEWARP";


#include "twcommon.h"
#include "twsys.h"
#include "tester.h"

#ifdef BF_PLUS  /* Unfortunate kludge because of illegal  */
#define BBN     /* redefinitions if we include 'machdep.h */
#endif          /* and stdio.h'.                          */
#ifdef BF_MACH
#define BBN
#endif



static Name     rcver;
static STime    rcvtim;
static int      sel;
static char     message[300];
static int      msgnum;
static Name     snder;
static STime    sndtim;
static Symbol   mtype;
static int		ttype;
static int      node;
static Name     obj_name;
static STime    stime;
static Name     objtype;
static Name     name;
static int      level;
static Hex      msgh;
static int      number;
static Hex      state;
static Hex      ocb;
static Hex      listElement;
static int      memsize;
static int      flow_log_size;
static int      msg_log_size;
static STime    hog_log_time;
static int      intrvl;
static STime    chg_time;
static int      penalty;
static int      reward;
static int      plimit;
static STime    window;
static int		events;
static double   windowMult;
static double	tmult;
static int		tadd;
static int 		maxLength;
static int      address;
static double   delay;
static int      IS_delta;
static int      IS_log_size;
static double   ptime;
static STime  begin;
static STime  end;
static int      threshold;
static int		mratio;
static int      numMigr = 1;
static int      splitIn;
static int      chooseIn;
static int      maxSimultMigr;
static int      cycles;
static int      migrationCost;
#ifdef BBN
static char     rf_path[80];
static char     rf_file[80];
#endif
static int		numbuffs;

#define I(x) (int *)(x)

ARG_DEF arg_defs [] =
{
	{ "RECEIVER",       NAME,           I(rcver)        },
	{ "RECEIVE TIME",   STIME,          I(&rcvtim)      },
	{ "SELECTOR",       INTEGER,        &sel            },
	{ "MESSAGE",        STRING,         I(message)      },
	{ "MESSAGE NUMBER", INTEGER,        &msgnum         },
	{ "SENDER",         NAME,           I(snder)        },
	{ "SEND TIME",      STIME,          I(&sndtim)      },
	{ "MESSAGE TYPE",   SYMBOL,         &mtype          },
	{ "NODE",           INTEGER,        &node           },
	{ "OBJECT NAME",    NAME,           I(obj_name)     },
	{ "SIMULATION TIME",STIME,          I(&stime)       },
	{ "TIME INTERVAL",  INTEGER,        &intrvl         },
	{ "CHANGE TIME",    STIME,          I(&chg_time)    },
	{ "OBJECT TYPE",    NAME,           I(objtype)      },
	{ "FUNCTION NAME",  NAME,           I(name)         },
	{ "MONITOR LEVEL",  INTEGER,        &level          },
	{ "MSGH POINTER",   HEX,            &msgh           },
	{ "COMMAND NUMBER", INTEGER,        &number         },
	{ "MAX ACKS",       INTEGER,        &number         },
	{ "STACK SIZE",     INTEGER,        &number         },
	{ "STATE POINTER",  HEX,            &state          },
	{ "LIST ELEMENT",   HEX,            &listElement    },
	{ "MEM KBYTES",     INTEGER,        &memsize        },
	{ "FLOW LOG SIZE",  INTEGER,        &flow_log_size  },
	{ "MSG LOG SIZE",   INTEGER,        &msg_log_size   },
	{ "HOG LOG TIME",   STIME,          I(&hog_log_time)},
	{ "PENALTY NUMBER", INTEGER,        &penalty        },
	{ "REWARD NUMBER",  INTEGER,        &reward         },
	{ "PEEK LIMIT",     INTEGER,        &plimit         },
	{ "TIME WINDOW",    STIME,          I(&window)      },
	{ "EVENT WINDOW",   INTEGER ,       &events      	},
	{ "WINDOW MULT",	REAL,			&windowMult		},
	{ "THROT MULT",		REAL,			&tmult			},
	{ "THROT ADD",  	INTEGER,		&tadd			},
	{ "THROT TYPE",		INTEGER,		&ttype			},
	{ "IQ LENGTH",		INTEGER,		&maxLength		},
	{ "ADDRESS",        HEX,            &address        },
	{ "DELAY",          REAL,           I(&delay)       },
	{ "IS DELTA",       INTEGER,        &IS_delta       },
	{ "IS LOG SIZE",    INTEGER,        &IS_log_size    },
	{ "PHASE TIME",     REAL,           I(&ptime)       },
	{ "THRESHOLD",      INTEGER,        &threshold      },
	{ "MIGRATIO",       INTEGER,        &mratio      	},
	{ "MIGRATIONS",     INTEGER,        &numMigr        },
	{ "SPLITSTRAT",     INTEGER,        &splitIn        },
	{ "CHOOSESTRAT",    INTEGER,        &chooseIn       },
	{ "MAXOFF",         INTEGER,        &maxSimultMigr  },
	{ "IDLEDLM",        INTEGER,        &cycles         },
	{ "DLMINT",         INTEGER,        &intrvl         },
	{ "PERMIGRCOST",	INTEGER,		&migrationCost 	},
#ifdef BBN
	{ "PATH",           STRING,         I(rf_path)      },
	{ "FILE",           STRING,         I(rf_file)      },
#endif
	{ "BEGIN",                STIME,          I(&begin)       },
	{ "END",          STIME,          I(&end)         },
	{ 0 }
};

int getfile ();
int putfile ();
int delfile ();
int typeinit ();
int help ();
int now_cmd ();
int myName_cmd ();
int obcreate_cmd ();
int phcreate_cmd ();
int tell_cmd ();
void allowNow ();
int numMsgs_cmd ();
int msg_cmd ();

#ifdef MONITOR
int monon ();
int set_level ();
int list_levels ();
int monobj ();
#endif
int monoff ();

int memanal ();
int manual_lvt ();
int manual_gvt ();
int gvt_position ();
int manual_objend ();
int clear_screen ();
int go ();
int timeon ();
int tw_timeoff ();
int timeval ();
int timechg ();

int dumpmsgx ();
int dumpstatex ();
int dumpstateAddrTablex ();
int dm ();
int dst ();
int showschedq ();
int showdeadq ();
int showocb ();
int showtypes ();
int showListHdr();

int dump_ocb_by_name ();
int show_iq_by_name ();
int show_oq_by_name ();
int show_sq_by_name ();
int showTruncSQ_by_name ();
int mem_used_in_queues ();

int show_miq_by_name ();
int show_moq_by_name ();
int show_msq_by_name ();

/* Added show_mocb_by_name();  PLRBUG */

int show_mocb_by_name ();

int dump_ocb_by_phase ();
int show_iq_by_phase ();
int show_oq_by_phase ();
int show_sq_by_phase ();

int ShowCacheEntry();
int ShowHomeListEntry();
int showHomeNode ();

int set_object_breakpoint ();
int set_time_breakpoint ();
int clear_breakpoint ();
int show_breakpoint ();

int set_object_watchpoint ();
int set_time_watchpoint ();
int clear_watchpoint ();
int show_watchpoint ();

int set_memsize ();
int stop ();

int set_nostdout ();
int set_nogvtout ();
int print_acks ();
int print_queues ();

#ifdef SUN
int dump_socket ();
int debug ();
#endif

int enable_mem_stats ();
int set_max_acks ();
int set_max_neg_acks ();
int	setMaxFreeMsgs();
int set_recv_q_limit ();
int set_its_a_feature ();
int set_obj_time_mode ();
int set_objstksize ();
int set_pktlen ();

int enable_file_echo ();
int disable_file_echo ();

int disable_message_sendback ();
int enable_aggressive_cancellation ();

int set_penalty ();
int set_reward ();

int set_time_window ();
int turnThrottleOn ();
int setEventThrottle ();
int setThrotMultFactor ();
int setThrotAddFactor ();
int setWindowMultiplier ();
int setMaxIQLen ();

int DumpHomeList ();
int DumpPendingList ();
int DumpCache ();

#ifdef MARK3

int set_plimit ();
int timetest ();
int watch ();
int debug ();

int disable_interrupts ();

#endif

int flowlog ();
int dumplog ();
int msglog ();
int dump_mlog ();
void hoglog();

int enableCritPath();

int set_prop_delay ();
int set_gvt_sync ();
int gvtinit ();
int subcube ();

#ifdef TRANSPUTER

int clockval ();
int test_xrecv ();
int test_xsend ();
int cdebug ();
int dump_kmsgh ();
int show_kq_ifc ();

#endif

int split_object_cmd ();
int move_phase_cmd ();
int PrintsendStateQ ();
int PrintsendOcbQ ();
int showStatesMovedQ	() ;

#ifdef EVTLOG

int set_evtlog ();
int set_chklog ();

#endif

int init_islog ();
int IS_dumplog ();

int set_cpulog ();
int set_cutoff_time ();

#ifdef DLM

int set_dlm ();
int set_threshold();
int setMigrRatio();
int setBatch();
int setNumMigrs();
int setSplitStrat ();
int setChooseStrat ();
int setMaxMigr ();
int setIdleDlmCycles ();
int setDlmInt ();
int setMigrGraph ();
int turnRatioMigrationOn ();
#ifdef BBN
int showsendbuffs ();
#endif
#endif  DLM


#ifdef BF_PLUS
int rfget_cmd ();
#endif

int quelog ();
int dump_qlog ();

FUNC_DEF func_defs [] =
{
	{ "QUELOG",         "MESSAGE QUEUE LOG",    BCAST,
						quelog,                 &number                 },
#ifdef DLM

	{ "DLM",            "ENABLE DYNAMIC LOAD MANAGEMENT",       BCAST,
						set_dlm                                         },

	{ "THRESH",         "SET DLM UTILIZATION THRESHOLD",        BCAST,
						set_threshold,          &threshold              },

	{ "RATIODLM",       "MIGRATE BY RATIO INSTEAD OF DIFFERENCE", BCAST,
						turnRatioMigrationOn,          0              	},

	{ "MRATIO",         "SET DLM UTILIZATION RATIO",        	BCAST,
						setMigrRatio,          &mratio              	},

	{ "BATCH", 			"RUN TWOS IN BATCH MODE",				BCAST,
						setBatch 										},

	{ "MIGRATIONS",     "SET # OF MIGRATIONS PER INTERVAL",     BCAST,
						setNumMigrs,            &numMigr                },

	{ "SPLITSTRAT",     "METHOD OF SPLITTING PHASE FOR DLM",    BCAST,
						setSplitStrat,          &splitIn                },

	{ "CHOOSESTRAT",    "METHOD OF CHOOSING PHASE FOR DLM",     BCAST,
						setChooseStrat,         &chooseIn               },

	{ "MAXOFF",         "MAX SIMULTANEOUS MIGRATIONS PER NODE", BCAST,
						setMaxMigr,             &maxSimultMigr          },

	{ "IDLEDLM",        "NUMBER OF INITIAL CYCLES WITHOUT DLM", BCAST,
						setIdleDlmCycles,               &cycles         },

	{ "DLMINT",         "INTERVAL BETWEEN DLM CYCLES",          BCAST,
						setDlmInt,                      &intrvl         },

	{ "DLMGRAPH",     "TOGGLE DLM GRAPHICS OUTPUT",           BCAST,
					  setMigrGraph                                      },

#endif DLM


	{ "DUMPQLOG",       "DUMP QUEUE LOG",       0,
						dump_qlog                                       },

	{ "CPULOG",         "WRITE CPU LOG",        0,
						set_cpulog                                      },

	{ "CUTOFF",         "SET CUTOFF TIME",      BCAST,
						set_cutoff_time,        I(&stime),              },

#ifdef EVTLOG

	{ "EVTLOG",         "WRITE EVENT LOG",      BCAST,
						set_evtlog                                      },

	{ "CHKLOG",         "CHECK EVENT LOG",      BCAST,
						set_chklog                                      },
#endif

#ifdef DLM

	{ "SPLIT",          "SPLIT OBJECT",         0,
						split_object_cmd,       I(name),I(&stime)       },

	{ "MOVE",           "MOVE PHASE",           0,
						move_phase_cmd, I(name),I(&stime),&node         },

	{ "SENDSTATEQ",     "PRINT QUEUE OF UNMIGRATED STATES",     0,
						PrintsendStateQ                                 },

	{ "SENDOCBQ",       "PRINT QUEUE OF UNMIGRATED OCBS",       0,
						PrintsendOcbQ                                   },

	{ "STATESRECVQ",	"SHOW QUEUE OF STATES WAITING ACKS",	0,
						showStatesMovedQ								},
#endif DLM

	{ "SUBCUBE",        "RUN ON SUBCUBE",       BCAST,
						subcube,        &node,  &number,  I(message)    },

	{ "GVTSYNC",        "SET GVT SYNC",         BCAST,
						set_gvt_sync,           &number                 },

	{ "GVTINIT",        "START GVT TIMER",      0,
						gvtinit,                                        },

	{ "WINDOW",         "SET TIME WINDOW",      BCAST,
						set_time_window,        I(&window)              },

	{ "THROTTLE",		"TURN THROTTLING ON",  BCAST,
						turnThrottleOn,			&ttype					},

	{ "ETHROTTLE",      "SET EVENT THROTTLE PARAMETER",      BCAST,
						setEventThrottle,        &events              	},

	{ "TMULT",      	"SET THROTTLE MULT PARAMETER",      BCAST,
						setThrotMultFactor,        I(&tmult)          	},
	
	{ "TADD",      		"SET THROTTLE ADD PARAMETER",      BCAST,
						setThrotAddFactor,        &tadd              	},

	{ "WSIZE",      	"SET THROTTLING WINDOW SIZE",      	BCAST,
						setWindowMultiplier,        I(&windowMult)     	},

	{ "MAXIQLEN",      	"LIMIT LENGTH OF INPUT QUEUE",      	BCAST,
						setMaxIQLen,        &maxLength             		},

	{ "GETFILE",        "GET FILE INTO MEMORY", BCAST,
						getfile,        I(message), I(name)             },

	{ "PUTFILE",        "CREATE OUTPUT FILE",   BCAST,
						putfile,        I(message), I(name), &node      },

	{ "DELFILE",        "DELETE INPUT FILE",    0,
						delfile,        I(name)                         },

	{ "TYPEINIT",       "INITIALIZE A TYPE",    BCAST,
						typeinit,       I(objtype),	I(name)				},

	{ "HELP",           "DISPLAY COMMANDS",     0,
						help                                            },

	{ "ACKS",           "PRINT ACKS PENDING",   0,
						print_acks                                      },

	{ "QUEUES",         "PRINT PENDING MESSAGE QUEUES", 0,
						print_queues                                    },

#ifdef SUN

	{ "SOCKET",         "DUMP SOCKET",          0,
						dump_socket,    &node                           },

	{ "DEBUG",          "CALL THE DEBUGGER",    0,
						debug                                           },

#endif

	{ "NOW",            "GET SIMULATION TIME",  0,
						now_cmd                                         },

	{ "MYNAME",         "GET OBJECT NAME",      0,
						myName_cmd                                      },

	{ "OBCREATE",       "CREATE OBJECT",        0,
						obcreate_cmd,   I(rcver), I(objtype), &node     },

	{ "PHCREATE",     "CREATE PHASE", 0,
					  phcreate_cmd,   I(rcver), I(objtype), &node,
					  I(&begin), I(&end)                                },

	{ "TELL",           "SEND EVENT MESSAGE",   0,
						tell_cmd,       I(rcver), I(&rcvtim), &sel, I(message)},

	{ "SCHEDULE",       "SEND EVENT MESSAGE",   0,
						tell_cmd,       I(rcver), I(&rcvtim), &sel, I(message)},

	{ "ALLOWNOW",		"ALLOW MESSAGES WITH TIME NOW",	BCAST,
						allowNow										},

	{ "NUMMSGS",        "GET MESSAGE COUNT",    0,
						numMsgs_cmd                                     },

	{ "MSG",            "GET MESSAGE TEXT",     0,
						msg_cmd,        &msgnum                         },

	{ "OBJEND",         "OBJECT END",           0,
						manual_objend                                   },
#ifdef MONITOR

	{ "MONON",          "MONITOR ON",           BCAST,
						monon                                           },

	{ "MLEVEL",         "MONITOR LEVEL",        0,
						set_level,      I(name), &level                 },

	{ "MLIST",          "MONITOR LIST LEVELS",  0,
						list_levels                                     },

	{ "MONOBJ",         "MONITOR ONE OBJECT",   BCAST,
						monobj,         I(obj_name)                     },

	{ "MONOFF",         "MONITOR OFF",          BCAST,
						monoff                                          },
#endif

	{ "MEMANAL",        "MEMORY ANALYSIS",      0,
						memanal                                         },

	{ "LVT",            "LOCAL VIRTUAL TIME",   0,
						manual_lvt                                      },

	{ "GVT",            "GLOBAL VIRTUAL TIME",  0,
						manual_gvt                                      },

	{ "CLR",            "CLEAR SCREEN",         0,
						clear_screen                                    },

	{ "GO",             "GO",                   0,
						go                                              },

	{ "TIMEON",         "INTERVAL TIMER ON",    0,
						timeon                                          },

	{ "TIMEOFF",        "INTERVAL TIMER OFF",   0,
						tw_timeoff                                      },

	{ "TIMEVAL",        "INTERVAL TIMER VALUE", 0,
						timeval,                &intrvl                 },

	{ "TIMECHG",        "INTERVAL CHANGE TIME", 0,
						timechg,                I(&chg_time)            },

	{ "SHOWSCHEDQ",     "SHOW SCHED QUEUE",     0,
						showschedq                                      },

	{ "SHOWDEADQ",     "SHOW DEAD OCB QUEUE",   0,
						showdeadq                                      },

	{ "DUMPMSG",        "DUMP MESSAGE",         0,
						dumpmsgx,               &msgh                   },

	{ "DUMPSTATE",      "DUMP STATE",           0,
						dumpstatex,             &state                  },

	{ "STADDRT",        "DUMP STATE ADDR TABLE",                0,
						dumpstateAddrTablex,    &state                  },

	{ "DM",             "DISPLAY MESSAGE",      0,
						dm,                     &msgh                   },

	{ "DST",            "DISPLAY STATE",        0,
						dst,                    &state                  },

	{ "DOCB",           "DUMP OCB BY NAME",     0,
						dump_ocb_by_name,       I(name)                 },
	 { "ADOCB",                "DUMP OCB BY ADDR",     0,
					  showocb,                &ocb                      },

	{ "SHOWTYPES",    "SHOW CONTENTS OF TYPE TABLE",  0,
					  showtypes                                         },

	{ "LISTHDR",        "SHOW LIST HEADER",     0,
					  showListHdr,              &listElement            },

	{ "IQ",             "SHOW INPUT QUEUE",     0,
						show_iq_by_name,        I(name)                 },

	{ "OQ",             "SHOW OUTPUT QUEUE",    0,
						show_oq_by_name,        I(name)                 },

	{ "SQ",             "SHOW STATE QUEUE",     0,
						show_sq_by_name,        I(name)                 },

	{ "MIQ",            "SHOW MIGRATING INPUT QUEUE",   0,
						show_miq_by_name,       I(name)                 },

	{ "MOQ",            "SHOW MIGRATING OUTPUT QUEUE",  0,
						show_moq_by_name,       I(name)                 },

	{ "MSQ",            "SHOW MIGRATING STATE QUEUE",   0,
						show_msq_by_name,       I(name)                 },

	{ "MOCB",           "SHOW MIGRATING OCB QUEUE",     0,
						show_mocb_by_name,      I(name)                 },

	{ "PDOCB",          "DUMP OCB BY PHASE",    0,
						dump_ocb_by_phase,      I(name), I(&ptime)      },

	{ "PIQ",            "SHOW INPUT QUEUE BY PHASE",    0,
						show_iq_by_phase,       I(name), I(&ptime)      },

	{ "POQ",            "SHOW OUTPUT QUEUE BY PHASE",   0,
						show_oq_by_phase,       I(name), I(&ptime)      },

	{ "PSQ",            "SHOW STATE QUEUE BY PHASE",    0,
						show_sq_by_phase,       I(name), I(&ptime)      },

	{ "TMEM",           "TOTAL MEMORY USED IN QUEUES",  0,
						mem_used_in_queues                              },

	{ "NOSTDOUT",       "DISABLE STDOUT",       BCAST,
						set_nostdout                                    },

	{ "NOGVTOUT",       "DISABLE GVT OUTPUT",   0,
						set_nogvtout                                    },

	{ "MEMSTATS",       "ENABLE MEMORY STATISTICS",     BCAST,
						enable_mem_stats                                },

	{ "MAXACKS",        "SET MAX ACKS",         BCAST,
						set_max_acks,           &number                 },

#ifndef BBN
	{ "MAXNEGACKS",     "SET MAX ACKS FOR ANTIMESSAGES",        BCAST,
						set_max_neg_acks,       &number                 },
#endif

	{ "MAXMSGPOOL",		"SET LIMIT FOR msg_free_pool",        BCAST,
						setMaxFreeMsgs,			&number                 },

#if !MARK3
	{ "RECVQLIMIT",     "SET RECEIVE QUEUE LIMIT",        BCAST,
						set_recv_q_limit,       &number                 },
#endif

	{ "OBJTIMEMODE",    "SET OBJECT TIMING MODE",        BCAST,
						set_obj_time_mode,       &number                 },

	{ "NOTABUG",     	"SET ITS A FEATURE",        BCAST,
						set_its_a_feature,       &number                 },

	{ "AGGRESSIVE",     "ENABLE AGGRESSIVE CANCELLATION",       BCAST,
						enable_aggressive_cancellation                  },

	{ "OBJSTKSIZE",     "SET OBJECT STACK SIZE",        BCAST,
						set_objstksize,         &number                 },

	{ "PKTLEN",         "SET PACKET LENGTH",    BCAST,
						set_pktlen,             &number                 },

	{ "FILEECHO",       "ENABLE FILE ECHO",     0,
						enable_file_echo                                },

	{ "NOFILEECHO",     "DISABLE FILE ECHO",    0,
						disable_file_echo                               },

	{ "BPO",            "BREAKPOINT OBJECT",    BCAST,
						set_object_breakpoint,  I(obj_name)             },

	{ "BPT",            "BREAKPOINT TIME",      BCAST,
						set_time_breakpoint,    I(&stime)               },

	{ "CBP",            "CLEAR BREAKPOINT",     BCAST,
						clear_breakpoint                                },

	{ "BP",             "SHOW BREAKPOINT",      0,
						show_breakpoint                                 },

	{ "WPO",            "WATCHPOINT OBJECT",    BCAST,
						set_object_watchpoint,  I(obj_name)             },

	{ "WPT",            "WATCHPOINT TIME",      BCAST,
						set_time_watchpoint,    I(&stime)               },

	{ "CWP",            "CLEAR WATCHPOINT",     BCAST,
						clear_watchpoint                                },

	{ "WP",             "SHOW WATCHPOINT",      0,
						show_watchpoint                                 },

	{ "MEMSIZE",        "SET MEMORY SIZE",      BCAST,
						set_memsize,            &memsize                },

	{ "NOSENDBACK",     "DISABLE MESSAGE SENDBACK",     BCAST,
						disable_message_sendback                        },

	{ "PENALTY",        "CANCELLATION PENALTY", BCAST,
						set_penalty,            &penalty                },

	{ "REWARD",         "CANCELLATION REWARD",  BCAST,
						set_reward,             &reward                 },

	{ "HOMELIST",       "SHOW HOME LIST",       0,
						DumpHomeList                                    },

	{ "PENDING",        "SHOW HL PENDING LIST", 0,
						DumpPendingList                                 },

	{ "CACHE",          "DUMP LOCATION CACHE",  0,
						DumpCache                                       },

	{ "CENTRY",         "SHOW LOCATION CACHE ENTRY",    0,
						ShowCacheEntry,         I(obj_name)             },

	{ "HENTRY",         "SHOW HOME LIST ENTRY", 0,
						ShowHomeListEntry,      I(obj_name)             },

	{ "HOME",           "SHOW HOME NODE",       0,
						showHomeNode,           I(obj_name)             },

	{ "STOP",           "STOP",                 0,
						stop                                            },

	{ "QUIT",           "QUIT",                 0,
						stop                                            },
#ifdef TRANSPUTER

	{ "CLOCKVAL",       "CLOCKVAL",     0,
						clockval                                        },

	{ "XRECV",          "XRECV",        0,
						test_xrecv                                      },

	{ "XSEND",          "XSEND",        0,
						test_xsend                                      },

	{ "CDEBUG",         "CDEBUG",       0,
						cdebug,                                         },

	{ "DUMPKMSGH",      "DUMPKMSGH",    0,
						dump_kmsgh,             & msgh                  },

	{ "SHOWKQ",         "SHOWKQ",       0,
						show_kq_ifc,            I(name)                         },

#endif

#ifdef MARK3

	{ "PLIMIT",         "MERCURY Q PEEK LIMIT", BCAST,
						set_plimit,             &plimit                 },

	{ "WATCH",          "DEBUG MERCURY",        0,
						watch,          &address                        },

	{ "TIMETEST",       "MARK3 TIMER TEST",     0,
						timetest                                        },

	{ "DEBUG",          "CALL THE DEBUGGER",    0,
						debug                                           },

	{ "NOINTS",         "DISABLE OBJECT INTERRUPTS",    BCAST,
						disable_interrupts                              },
#endif

	{ "FLOWLOG",        "ALLOCATE SPACE FOR FLOW LOG",  BCAST,
						flowlog,        &flow_log_size                  },

	{ "MSGLOG",         "ALLOCATE SPACE FOR MSG LOG",   BCAST,
						msglog,         &msg_log_size                   },

	{ "DUMPLOG",        "DUMP FLOW LOG",        0,
						dumplog                                         },

	{ "DUMPMLOG",       "DUMP MSG LOG",         0,
						dump_mlog                                       },

	{ "PROPDELAY",      "PROPORTIONAL DELAY FOR OBJECTS",       BCAST,
						set_prop_delay, I(&delay)                       },

	{ "ISLOG",          "INSTANTANEOUS SPEEDUP LOG",    BCAST,
						init_islog,     &IS_log_size, &IS_delta         },

	{ "IS_DUMPLOG",     "DUMP INSTANTANEOUS SPEEDUP LOG", BCAST,
						IS_dumplog                                      },

	{ "HOGLOG",         "Log longest uninterrupted objects",    BCAST,
						hoglog, I(&hog_log_time)						},


	{ "CRITPATH",		"Calculate the critical path",			BCAST,
						enableCritPath									},

	{ "TSQ",			"Show truncated state queue",			0,
						showTruncSQ_by_name,				I(name)		},


#ifdef BBN
	{ "SENDBUFFS",      "SHOW SEND BUFFERS",    0,
						showsendbuffs                                   },
#ifdef BF_PLUS

	{ "RFGET",          "RFGET COMMAND",        0,
						rfget_cmd,      I(rf_path), I(rf_file)          },
#endif
#endif

	{ 0 }
};


SYM_DEF sym_defs [] =
{
	{ "CMSG",           CMSG    },
	{ "EMSG",           EMSG    },
	{ "GVTSYS",         GVTSYS  },
	{ 0 }
};

help ()
{
	int i;

	_pprintf ( "\n" );

	for ( i = 0; func_defs[i].func_name != 0; i++ )
	{
	   _pprintf ( "%-30s%s\n", func_defs[i].func_name, func_defs[i].func_desc );
	}
}

@


1.14
log
@Fix compile errors.
@
text
@d7 3
d81 1
d104 4
a107 1
static int		memory;
d164 5
a168 1
	{ "MEMORY THROTTLE",INTEGER ,       &memory      	},
d304 1
d306 4
a309 2
int setMemThrottle ();
int turnThrottleOn ();
d382 1
d408 3
d489 2
a490 2
	{ "THROTTLE",		"TURN THROTTLING ON",	BCAST,
						turnThrottleOn									},
d495 11
a505 2
	{ "MTHROTTLE",      "SET MEMORY THROTTLE PARAMETER",      BCAST,
						setMemThrottle,        &memory              	},
@


1.13
log
@Add ALLOWNOW and MAXMSGPOOL.
@
text
@d7 3
d151 1
a151 1
	{ "HOG LOG TIME",   STIME,          &hog_log_time   },
d471 2
a472 2
	{ "THROTTLE"		"TURN THROTTLING ON",	BCAST,
						turnThrottleOn,									},
d821 1
a821 1
						hoglog, &hog_log_time                           },
d828 1
a828 1
						showTruncSQ_by_name,				I(name)			},
@


1.12
log
@Added tester commands for throttling, critical path, and new dynamic load 
management capabilities (PLR)
@
text
@d7 4
d188 1
d273 1
d487 1
a487 1
						typeinit,       I(objtype)                      },
d527 3
d551 1
a551 1
						
d594 1
a594 1
 
d597 1
a597 1
 
d603 1
a603 1
 
d663 1
d666 1
d668 3
d826 1
a826 1
	
@


1.11
log
@Fix misspelling of MARK3.
@
text
@d7 3
d92 2
d102 1
d108 1
d113 1
d149 2
d157 1
d164 1
d222 1
d284 3
d309 2
d331 1
d350 2
d384 6
d446 2
d462 9
d806 8
a814 2
#ifdef DLM

a816 1
#endif DLM
@


1.10
log
@Remove recv_q_limit stuff for Mark3.
@
text
@d7 3
d619 1
a619 1
#if !Mark3
@


1.9
log
@New copyright notice.
@
text
@d7 3
d616 1
d619 1
@


1.8
log
@Added set receive q limit, set object timing mode and changable notabug
@
text
@d1 4
d7 3
a39 3
/*      Copyright (C) 1989, California Institute of Technology.
		U. S. Government Sponsorship under NASA Contract NAS7-918
		is acknowledged.        */
@


1.7
log
@Tab conversion.
@
text
@d2 4
a5 1
 * $Log:        comdtab.c,v $
d245 3
d608 9
@


1.6
log
@Add LISTHDR command.
@
text
@d2 4
a5 1
 * $Log:	comdtab.c,v $
d28 1
a28 1
char comdtab_id [] = "@@(#)comdtab.c	1.53\t10/2/89\t14:12:10\tTIMEWARP";
d30 3
a32 3
/*	Copyright (C) 1989, California Institute of Technology.
	U. S. Government Sponsorship under NASA Contract NAS7-918
	is acknowledged.	*/
d47 34
a80 34
static Name	rcver;
static STime	rcvtim;
static int	sel;
static char	message[300];
static int	msgnum;
static Name	snder;
static STime	sndtim;
static Symbol	mtype;
static int	node;
static Name	obj_name;
static STime	stime;
static Name	objtype;
static Name	name;
static int	level;
static Hex	msgh;
static int	number;
static Hex	state;
static Hex	ocb;
static Hex	listElement;
static int	memsize;
static int	flow_log_size;
static int	msg_log_size;
static STime	hog_log_time;
static int	intrvl;
static STime	chg_time;
static int	penalty;
static int	reward;
static int	plimit;
static STime	window;
static int	address;
static double	delay;
static int	IS_delta;
static int	IS_log_size;
static double	ptime;
d83 6
a88 6
static int	threshold;
static int	numMigr = 1;
static int	splitIn;
static int	chooseIn;
static int	maxSimultMigr;
static int	cycles;
d90 2
a91 2
static char	rf_path[80];
static char	rf_file[80];
d98 42
a139 42
    { "RECEIVER",	NAME,		I(rcver)	},
    { "RECEIVE TIME",	STIME,		I(&rcvtim)	},
    { "SELECTOR",	INTEGER,	&sel		},
    { "MESSAGE",	STRING,		I(message)	},
    { "MESSAGE NUMBER",	INTEGER,	&msgnum		},
    { "SENDER",		NAME,		I(snder)	},
    { "SEND TIME",	STIME,		I(&sndtim)	},
    { "MESSAGE TYPE",	SYMBOL,		&mtype		},
    { "NODE",		INTEGER,	&node		},
    { "OBJECT NAME",	NAME,		I(obj_name)	},
    { "SIMULATION TIME",STIME,		I(&stime)	},
    { "TIME INTERVAL",	INTEGER,	&intrvl		},
    { "CHANGE TIME",	STIME,		I(&chg_time)	},
    { "OBJECT TYPE",	NAME,		I(objtype)	},
    { "FUNCTION NAME",	NAME,		I(name)		},
    { "MONITOR LEVEL",	INTEGER,	&level		},
    { "MSGH POINTER",   HEX,            &msgh           },
    { "COMMAND NUMBER",	INTEGER,	&number		},
    { "MAX ACKS",	INTEGER,	&number		},
    { "STACK SIZE",	INTEGER,	&number		},
    { "STATE POINTER",	HEX,		&state		},
    { "LIST ELEMENT",	HEX,		&listElement	},
    { "MEM KBYTES",	INTEGER,	&memsize	},
    { "FLOW LOG SIZE",	INTEGER,	&flow_log_size	},
    { "MSG LOG SIZE",	INTEGER,	&msg_log_size	},
    { "HOG LOG TIME",	STIME,		&hog_log_time	},
    { "PENALTY NUMBER",	INTEGER,	&penalty	},
    { "REWARD NUMBER",	INTEGER,	&reward		},
    { "PEEK LIMIT",	INTEGER,	&plimit		},
    { "TIME WINDOW",	STIME,		I(&window)	},
    { "ADDRESS",	HEX,		&address	},
    { "DELAY",		REAL,		I(&delay)	},
    { "IS DELTA",	INTEGER,	&IS_delta	},
    { "IS LOG SIZE",	INTEGER,	&IS_log_size	},
    { "PHASE TIME",	REAL,		I(&ptime)	},
    { "THRESHOLD",	INTEGER,	&threshold	},
    { "MIGRATIONS",	INTEGER, 	&numMigr	},
    { "SPLITSTRAT",	INTEGER,	&splitIn	},
    { "CHOOSESTRAT",	INTEGER,	&chooseIn	},
    { "MAXOFF",		INTEGER,	&maxSimultMigr  },
    { "IDLEDLM",	INTEGER,	&cycles		},
    { "DLMINT",		INTEGER,	&intrvl		},
d141 2
a142 2
    { "PATH",		STRING,		I(rf_path)	},
    { "FILE",		STRING,		I(rf_file)	},
d144 3
a146 3
    { "BEGIN",                STIME,          I(&begin)       },
    { "END",          STIME,          I(&end)         },
    { 0 }
d337 2
a338 2
    { "QUELOG",		"MESSAGE QUEUE LOG",	BCAST,
			quelog,			&number			},
d341 2
a342 2
    { "DLM",		"ENABLE DYNAMIC LOAD MANAGEMENT",	BCAST,
			set_dlm						},
d344 2
a345 2
    { "THRESH",		"SET DLM UTILIZATION THRESHOLD",	BCAST,
			set_threshold,		&threshold		},
d347 2
a348 2
    { "MIGRATIONS",	"SET # OF MIGRATIONS PER INTERVAL",	BCAST,
			setNumMigrs,		&numMigr		},
d350 2
a351 2
    { "SPLITSTRAT",	"METHOD OF SPLITTING PHASE FOR DLM",	BCAST,
			setSplitStrat,		&splitIn		},
d353 2
a354 2
    { "CHOOSESTRAT",	"METHOD OF CHOOSING PHASE FOR DLM",	BCAST,
			setChooseStrat,		&chooseIn		},
d356 2
a357 2
    { "MAXOFF",		"MAX SIMULTANEOUS MIGRATIONS PER NODE",	BCAST,
			setMaxMigr,		&maxSimultMigr		},
d359 2
a360 2
    { "IDLEDLM",	"NUMBER OF INITIAL CYCLES WITHOUT DLM",	BCAST,
			setIdleDlmCycles,		&cycles		},
d362 2
a363 2
    { "DLMINT",		"INTERVAL BETWEEN DLM CYCLES",		BCAST,
			setDlmInt,			&intrvl		},
d365 2
a366 2
    { "DLMGRAPH",     "TOGGLE DLM GRAPHICS OUTPUT",           BCAST,
                      setMigrGraph                                    	},
d371 2
a372 2
    { "DUMPQLOG",	"DUMP QUEUE LOG",	0,
			dump_qlog					},
d374 2
a375 2
    { "CPULOG",		"WRITE CPU LOG",	0,
			set_cpulog					},
d377 2
a378 2
    { "CUTOFF",		"SET CUTOFF TIME",	BCAST,
			set_cutoff_time,	I(&stime),		},
d382 2
a383 2
    { "EVTLOG",		"WRITE EVENT LOG",	BCAST,
			set_evtlog					},
d385 2
a386 2
    { "CHKLOG",		"CHECK EVENT LOG",	BCAST,
			set_chklog					},
d391 2
a392 2
    { "SPLIT",		"SPLIT OBJECT",		0,
			split_object_cmd,	I(name),I(&stime)	},
d394 2
a395 2
    { "MOVE",		"MOVE PHASE",		0,
			move_phase_cmd,	I(name),I(&stime),&node		},
d397 2
a398 2
    { "SENDSTATEQ",	"PRINT QUEUE OF UNMIGRATED STATES",	0,
			PrintsendStateQ					},
d400 2
a401 2
    { "SENDOCBQ",	"PRINT QUEUE OF UNMIGRATED OCBS",	0,
			PrintsendOcbQ					},
d405 2
a406 2
    { "SUBCUBE",	"RUN ON SUBCUBE",	BCAST,
			subcube,	&node,	&number,  I(message)	},
d408 2
a409 2
    { "GVTSYNC",	"SET GVT SYNC",		BCAST,
			set_gvt_sync,		&number			},
d411 2
a412 2
    { "GVTINIT",	"START GVT TIMER",	0,
			gvtinit,					},
d414 2
a415 2
    { "WINDOW",		"SET TIME WINDOW",	BCAST,
			set_time_window,	I(&window)		},
d417 2
a418 2
    { "GETFILE",	"GET FILE INTO MEMORY",	BCAST,
			getfile,	I(message), I(name)		},
d420 2
a421 2
    { "PUTFILE",	"CREATE OUTPUT FILE",	BCAST,
			putfile,	I(message), I(name), &node	},
d423 2
a424 2
    { "DELFILE",	"DELETE INPUT FILE",	0,
			delfile,	I(name)				},
d426 2
a427 2
    { "TYPEINIT",	"INITIALIZE A TYPE",	BCAST,
			typeinit,	I(objtype)			},
d429 2
a430 2
    { "HELP",		"DISPLAY COMMANDS",	0,
			help						},
d432 2
a433 2
    { "ACKS",		"PRINT ACKS PENDING",	0,
			print_acks					},
d435 2
a436 2
    { "QUEUES",		"PRINT PENDING MESSAGE QUEUES",	0,
			print_queues					},
d440 2
a441 2
    { "SOCKET",		"DUMP SOCKET",		0,
			dump_socket,	&node				},
d443 2
a444 2
    { "DEBUG",		"CALL THE DEBUGGER",	0,
			debug						},
d448 2
a449 2
    { "NOW",		"GET SIMULATION TIME",	0,
			now_cmd						},
d451 2
a452 2
    { "MYNAME",		"GET OBJECT NAME",	0,
			myName_cmd					},
d454 2
a455 2
    { "OBCREATE",	"CREATE OBJECT",	0,
			obcreate_cmd,	I(rcver), I(objtype), &node	},
d457 3
a459 3
    { "PHCREATE",     "CREATE PHASE", 0,
                      phcreate_cmd,   I(rcver), I(objtype), &node,
                      I(&begin), I(&end)                              	},
d461 2
a462 2
    { "TELL",		"SEND EVENT MESSAGE",	0,
			tell_cmd,	I(rcver), I(&rcvtim), &sel, I(message)},
d464 2
a465 2
    { "SCHEDULE",	"SEND EVENT MESSAGE",	0,
			tell_cmd,	I(rcver), I(&rcvtim), &sel, I(message)},
d467 2
a468 2
    { "NUMMSGS",	"GET MESSAGE COUNT",	0,
			numMsgs_cmd					},
d470 2
a471 2
    { "MSG",		"GET MESSAGE TEXT",	0,
			msg_cmd,	&msgnum				},
d473 2
a474 2
    { "OBJEND",		"OBJECT END",		0,
			manual_objend					},
d477 2
a478 2
    { "MONON",		"MONITOR ON",		BCAST,
			monon						},
d480 2
a481 2
    { "MLEVEL",		"MONITOR LEVEL",	0,
			set_level,	I(name), &level			},
d483 2
a484 2
    { "MLIST",		"MONITOR LIST LEVELS",	0,
			list_levels					},
d486 5
a490 5
    { "MONOBJ",		"MONITOR ONE OBJECT",	BCAST,
			monobj,		I(obj_name)			},
			
    { "MONOFF",		"MONITOR OFF",		BCAST,
			monoff						},
d493 2
a494 2
    { "MEMANAL",	"MEMORY ANALYSIS",	0,
			memanal						},
d496 2
a497 2
    { "LVT",		"LOCAL VIRTUAL TIME",	0,
			manual_lvt					},
d499 2
a500 2
    { "GVT",		"GLOBAL VIRTUAL TIME",	0,
			manual_gvt					},
d502 2
a503 2
    { "CLR",		"CLEAR SCREEN",		0,
			clear_screen					},
d505 2
a506 2
    { "GO",		"GO",			0,
			go						},
d508 2
a509 2
    { "TIMEON",		"INTERVAL TIMER ON",	0,
			timeon						},
d511 2
a512 2
    { "TIMEOFF",	"INTERVAL TIMER OFF",	0,
			tw_timeoff					},
d514 2
a515 2
    { "TIMEVAL",	"INTERVAL TIMER VALUE",	0,
			timeval,		&intrvl			},
d517 2
a518 2
    { "TIMECHG",	"INTERVAL CHANGE TIME",	0,
			timechg,		I(&chg_time)		},
d520 2
a521 2
    { "SHOWSCHEDQ",     "SHOW SCHED QUEUE",	0,
                        showschedq                                      },
d523 2
a524 2
    { "SHOWDEADQ",     "SHOW DEAD OCB QUEUE",	0,
                        showdeadq                                      },
d526 2
a527 2
    { "DUMPMSG",        "DUMP MESSAGE",		0,
                        dumpmsgx,		&msgh                   },
d529 2
a530 2
    { "DUMPSTATE",	"DUMP STATE",		0,
			dumpstatex,		&state			},
d532 2
a533 2
    { "STADDRT",	"DUMP STATE ADDR TABLE",		0,
			dumpstateAddrTablex,	&state			},
d535 2
a536 2
    { "DM",	        "DISPLAY MESSAGE",	0,
                        dm,			&msgh                   },
d538 2
a539 2
    { "DST",		"DISPLAY STATE",	0,
			dst,			&state			},
d541 4
a544 4
    { "DOCB",		"DUMP OCB BY NAME",	0,
			dump_ocb_by_name,	I(name)			},
     { "ADOCB",                "DUMP OCB BY ADDR",     0,
                      showocb,                &ocb                    	},
d546 2
a547 2
    { "SHOWTYPES",    "SHOW CONTENTS OF TYPE TABLE",  0,
                      showtypes                                       	},
d549 2
a550 2
    { "LISTHDR",    	"SHOW LIST HEADER",  	0,
                      showListHdr,		&listElement            },
d552 2
a553 2
    { "IQ",		"SHOW INPUT QUEUE",	0,
			show_iq_by_name,	I(name)			},
d555 2
a556 2
    { "OQ",		"SHOW OUTPUT QUEUE",	0,
			show_oq_by_name,	I(name)			},
d558 2
a559 2
    { "SQ",		"SHOW STATE QUEUE",	0,
			show_sq_by_name,	I(name)			},
d561 2
a562 2
    { "MIQ",		"SHOW MIGRATING INPUT QUEUE",	0,
			show_miq_by_name,	I(name)			},
d564 2
a565 2
    { "MOQ",		"SHOW MIGRATING OUTPUT QUEUE",	0,
			show_moq_by_name,	I(name)			},
d567 2
a568 2
    { "MSQ",		"SHOW MIGRATING STATE QUEUE",	0,
			show_msq_by_name,	I(name)			},
d570 2
a571 2
    { "MOCB",		"SHOW MIGRATING OCB QUEUE",	0,
			show_mocb_by_name,	I(name)			},
d573 2
a574 2
    { "PDOCB",		"DUMP OCB BY PHASE",	0,
			dump_ocb_by_phase,	I(name), I(&ptime)	},
d576 2
a577 2
    { "PIQ",		"SHOW INPUT QUEUE BY PHASE",	0,
			show_iq_by_phase,	I(name), I(&ptime)	},
d579 2
a580 2
    { "POQ",		"SHOW OUTPUT QUEUE BY PHASE",	0,
			show_oq_by_phase,	I(name), I(&ptime)	},
d582 2
a583 2
    { "PSQ",		"SHOW STATE QUEUE BY PHASE",	0,
			show_sq_by_phase,	I(name), I(&ptime)	},
d585 2
a586 2
    { "TMEM",		"TOTAL MEMORY USED IN QUEUES",	0,
			mem_used_in_queues				},
d588 2
a589 2
    { "NOSTDOUT",	"DISABLE STDOUT",	BCAST,
			set_nostdout					},
d591 2
a592 2
    { "NOGVTOUT",	"DISABLE GVT OUTPUT",	0,
			set_nogvtout					},
d594 2
a595 2
    { "MEMSTATS",	"ENABLE MEMORY STATISTICS",	BCAST,
			enable_mem_stats				},
d597 2
a598 2
    { "MAXACKS",	"SET MAX ACKS",		BCAST,
			set_max_acks,		&number			},
d600 2
a601 2
    { "MAXNEGACKS",	"SET MAX ACKS FOR ANTIMESSAGES",	BCAST,
			set_max_neg_acks,	&number			},
d603 2
a604 2
    { "AGGRESSIVE",	"ENABLE AGGRESSIVE CANCELLATION",	BCAST,
			enable_aggressive_cancellation			},
d606 2
a607 2
    { "OBJSTKSIZE",	"SET OBJECT STACK SIZE",	BCAST,
			set_objstksize,		&number			},
d609 2
a610 2
    { "PKTLEN",		"SET PACKET LENGTH",	BCAST,
			set_pktlen,		&number			},
d612 2
a613 2
    { "FILEECHO",	"ENABLE FILE ECHO",	0,
			enable_file_echo				},
d615 2
a616 2
    { "NOFILEECHO",	"DISABLE FILE ECHO",	0,
			disable_file_echo				},
d618 2
a619 2
    { "BPO",		"BREAKPOINT OBJECT",	BCAST,
			set_object_breakpoint,	I(obj_name)		},
d621 2
a622 2
    { "BPT",		"BREAKPOINT TIME",	BCAST,
			set_time_breakpoint,	I(&stime)		},
d624 2
a625 2
    { "CBP",		"CLEAR BREAKPOINT",	BCAST,
			clear_breakpoint				},
d627 2
a628 2
    { "BP",		"SHOW BREAKPOINT",	0,
			show_breakpoint					},
d630 2
a631 2
    { "WPO",		"WATCHPOINT OBJECT",	BCAST,
			set_object_watchpoint,	I(obj_name)		},
d633 2
a634 2
    { "WPT",		"WATCHPOINT TIME",	BCAST,
			set_time_watchpoint,	I(&stime)		},
d636 2
a637 2
    { "CWP",		"CLEAR WATCHPOINT",	BCAST,
			clear_watchpoint				},
d639 2
a640 2
    { "WP",		"SHOW WATCHPOINT",	0,
			show_watchpoint					},
d642 2
a643 2
    { "MEMSIZE",	"SET MEMORY SIZE",	BCAST,
			set_memsize,		&memsize		},
d645 2
a646 2
    { "NOSENDBACK",	"DISABLE MESSAGE SENDBACK",	BCAST,
			disable_message_sendback			},
d648 2
a649 2
    { "PENALTY",	"CANCELLATION PENALTY",	BCAST,
			set_penalty,		&penalty		},
d651 2
a652 2
    { "REWARD",		"CANCELLATION REWARD",	BCAST,
			set_reward,		&reward			},
d654 2
a655 2
    { "HOMELIST",	"SHOW HOME LIST",	0,
			DumpHomeList					},
d657 2
a658 2
    { "PENDING",	"SHOW HL PENDING LIST",	0,
			DumpPendingList					},
d660 2
a661 2
    { "CACHE",		"DUMP LOCATION CACHE",	0,
			DumpCache					},
d663 2
a664 2
    { "CENTRY",		"SHOW LOCATION CACHE ENTRY",	0,
			ShowCacheEntry,		I(obj_name)		},
d666 2
a667 2
    { "HENTRY",		"SHOW HOME LIST ENTRY",	0,
			ShowHomeListEntry,	I(obj_name)		},
d669 2
a670 2
    { "HOME",		"SHOW HOME NODE",	0,
			showHomeNode,		I(obj_name)		},
d672 2
a673 2
    { "STOP",		"STOP",			0,
			stop						},
d675 2
a676 2
    { "QUIT",		"QUIT",			0,
			stop						},
d679 2
a680 2
    { "CLOCKVAL",	"CLOCKVAL",	0,
			clockval					},
d682 2
a683 2
    { "XRECV",		"XRECV",	0,
			test_xrecv					},
d685 2
a686 2
    { "XSEND",		"XSEND",	0,
			test_xsend					},
d688 2
a689 2
    { "CDEBUG",		"CDEBUG",	0,
			cdebug,		  	 			},
d691 2
a692 2
    { "DUMPKMSGH",	"DUMPKMSGH",	0,
			dump_kmsgh,	  	& msgh 			},
d694 2
a695 2
    { "SHOWKQ",		"SHOWKQ",	0,
			show_kq_ifc,	  	I(name) 			},
d701 2
a702 2
    { "PLIMIT",		"MERCURY Q PEEK LIMIT",	BCAST,
			set_plimit,		&plimit			},
d704 2
a705 2
    { "WATCH",		"DEBUG MERCURY",	0,
			watch,		&address			},
d707 2
a708 2
    { "TIMETEST",	"MARK3 TIMER TEST",	0,
			timetest					},
d710 2
a711 2
    { "DEBUG",		"CALL THE DEBUGGER",	0,
			debug						},
d713 2
a714 2
    { "NOINTS",		"DISABLE OBJECT INTERRUPTS",	BCAST,
			disable_interrupts				},
d717 2
a718 2
    { "FLOWLOG",	"ALLOCATE SPACE FOR FLOW LOG",	BCAST,
			flowlog,	&flow_log_size			},
d720 2
a721 2
    { "MSGLOG",		"ALLOCATE SPACE FOR MSG LOG",	BCAST,
			msglog,		&msg_log_size			},
d723 2
a724 2
    { "DUMPLOG",	"DUMP FLOW LOG",	0,
			dumplog						},
d726 2
a727 2
    { "DUMPMLOG",	"DUMP MSG LOG",		0,
			dump_mlog					},
d729 2
a730 2
    { "PROPDELAY",	"PROPORTIONAL DELAY FOR OBJECTS",	BCAST,
			set_prop_delay,	I(&delay)			},
d732 2
a733 2
    { "ISLOG",		"INSTANTANEOUS SPEEDUP LOG",	BCAST,
			init_islog,	&IS_log_size, &IS_delta		},
d735 2
a736 2
    { "IS_DUMPLOG",	"DUMP INSTANTANEOUS SPEEDUP LOG", BCAST,
			IS_dumplog					},
d738 2
a739 2
    { "HOGLOG",		"Log longest uninterrupted objects",	BCAST,
			hoglog,	&hog_log_time				},
d744 2
a745 2
    { "SENDBUFFS",	"SHOW SEND BUFFERS",	0,
			showsendbuffs					},
d749 2
a750 2
    { "RFGET",		"RFGET COMMAND",	0,
			rfget_cmd,	I(rf_path), I(rf_file)		},
d754 1
a754 1
    { 0 }
d760 4
a763 4
    { "CMSG",		CMSG	},
    { "EMSG",		EMSG	},
    { "GVTSYS",		GVTSYS	},
    { 0 }
d768 1
a768 1
    int i;
d770 1
a770 1
    _pprintf ( "\n" );
d772 4
a775 4
    for ( i = 0; func_defs[i].func_name != 0; i++ )
    {
       _pprintf ( "%-30s%s\n", func_defs[i].func_name, func_defs[i].func_desc );
    }
@


1.5
log
@Added a few commands to tester for dynamic load management.  They include
a graphics toggle, a phase create command, a command to dump ocbs by
address, and a command to show the contents of the type table.
@
text
@d3 5
d62 1
d116 1
d188 1
d546 2
@


1.4
log
@Change timeoff() to tw_timeoff()--conflict with Sun libraries.
@
text
@d3 3
d56 1
d72 2
d134 2
d147 1
d179 2
d310 1
d353 4
d446 4
d532 6
@


1.3
log
@1.  Remove GVTPOS.
2.  Add HOGLOG.
3.  Add SCHEDULE as synonym for TELL.
4.  Add TYPEINIT.
5.  Change DELFILE so it doesn't broadcast.
@
text
@d3 7
d159 1
a159 1
int timeoff ();
d481 1
a481 1
			timeoff						},
@


1.2
log
@add staddrt command (plr)
@
text
@d3 3
a40 2
static int	row;
static int	column;
d49 1
a89 2
    { "ROW NUMBER",	INTEGER,	&row		},
    { "COLUMN NUMBER",	INTEGER,	&column		},
d100 1
d127 1
d246 1
d389 1
a389 1
    { "DELFILE",	"DELETE INPUT FILE",	BCAST,
d392 3
d426 3
d450 1
a450 2
#endif

d453 1
a463 3
    { "GVTPOS",		"GVT DISPLAY POSITION",	0,
			gvt_position,		&row, &column		},

d691 3
@


1.1
log
@Initial revision
@
text
@d2 4
a5 1
 * $Log$
d156 1
d487 3
@

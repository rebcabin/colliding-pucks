head     1.3;
branch   ;
access   ;
symbols  TW2_7:1.3 TW2_6:1.3 TW2_5_1:1.3 TW2_5:1.2 TW2_4_2:1.1 TW2_4_1:1.1 TW2_4:1.1;
locks    ; strict;
comment  @ * @;


1.3
date     91.07.17.15.06.14;  author judy;  state Rel;
branches ;
next     1.2;

1.2
date     91.06.03.12.16.19;  author configtw;  state Rel;
branches ;
next     1.1;

1.1
date     90.08.07.15.37.42;  author configtw;  state Rel;
branches ;
next     ;


desc
@time routine for Butterfly
@


1.3
log
@New copyright notice.
@
text
@/*      Copyright (C) 1989, 1991, California Institute of Technology.
		U. S. Government Sponsorship under NASA Contract NAS7-918
		is acknowledged.        */

/*
 * $Log:	BBNtime.c,v $
 * Revision 1.2  91/06/03  12:16:19  configtw
 * Tab conversion.
 * 
 * Revision 1.1  90/08/07  15:37:42  configtw
 * Initial revision
 * 
*/

#include <stdio.h>

extern unsigned int node_cputime;
static unsigned int last_time;

butterflytime_init ( rtc_sync )

	unsigned int rtc_sync;
{
	last_time = rtc_sync;
	node_cputime = 0;
}

unsigned int butterflytime ()
{
	register unsigned int time, delta;

#ifdef BF_PLUS
	time = rtc;
#endif
#ifdef BF_MACH
	time = getrtc();
#endif

	if ( time > last_time )
		delta = time - last_time;
	else
		delta = last_time - time;

	node_cputime += delta;
	last_time = time;
	return delta;
}
@


1.2
log
@Tab conversion.
@
text
@d1 4
d6 4
a9 1
 * $Log:        BBNtime.c,v $
a13 3
/*      Copyright (C) 1989, California Institute of Technology.
		U. S. Government Sponsorship under NASA Contract NAS7-918
		is acknowledged.        */
@


1.1
log
@Initial revision
@
text
@d2 4
a5 1
 * $Log$
d7 3
a9 3
/*	Copyright (C) 1989, California Institute of Technology.
	U. S. Government Sponsorship under NASA Contract NAS7-918
	is acknowledged.	*/
d18 1
a18 1
    unsigned int rtc_sync;
d20 2
a21 2
    last_time = rtc_sync;
    node_cputime = 0;
d26 1
a26 1
    register unsigned int time, delta;
d29 1
a29 1
    time = rtc;
d32 1
a32 1
    time = getrtc();
d35 4
a38 4
    if ( time > last_time )
	delta = time - last_time;
    else
	delta = last_time - time;
d40 3
a42 3
    node_cputime += delta;
    last_time = time;
    return delta;
@

head     1.3;
branch   ;
access   ;
symbols  TW2_7:1.3 TW2_6:1.3 TW2_5_1:1.3 TW2_5:1.2 TW2_4_2:1.1 TW2_4_1:1.1 TW2_4:1.1;
locks    ; strict;
comment  @ * @;


1.3
date     91.07.17.15.06.21;  author judy;  state Rel;
branches ;
next     1.2;

1.2
date     91.06.03.12.23.29;  author configtw;  state Rel;
branches ;
next     1.1;

1.1
date     90.08.07.15.37.47;  author configtw;  state Rel;
branches ;
next     ;


desc
@host file i/o functions
@


1.3
log
@New copyright notice.
@
text
@/*      Copyright (C) 1989, 1991, California Institute of Technology.
		U. S. Government Sponsorship under NASA Contract NAS7-918
		is acknowledged.        */

/*
 * $Log:	HOST_fileio.c,v $
 * Revision 1.2  91/06/03  12:23:29  configtw
 * Tab conversion.
 * 
 * Revision 1.1  90/08/07  15:37:47  configtw
 * Initial revision
 * 
*/

/****************************************************************/
/*  HOST_fileio.c                       10-01-88 pjh            */
/*                                                              */
/*  This module provides a series of host computer file I/O     */
/*  functions for the TRANSPUTER, The Butterfly Plus running    */
/*  Chrysalis, the BBN GP1000 running MACH, SUN workstations    */
/*  runnint BSD Unix and the Mark 3 hypercube.                  */
/*  The purpose of these functions is to centralize all of the  */
/*  machine dependent code dealing with the file I/O of         */
/*  the various systems. Hence making the Time Warp & the       */
/*  Time Warp Simulator code alot cleaner.                      */
/*                                                              */
/*  For the Mark3 running Time Warp, the host working directory */
/*  is established at TW init time by the run program.          */
/*  If no initialization is made or <if we are using this for   */
/*  the simulator, all files will be made on cwd. JJW 1/23/89>  */
/*                                                              */
/*  For the Butterfly Plus running Chrysalis, there is no       */
/*  easy way to determine the working directory. So, it is      */
/*  currently implemented as a compile time constant.           */
/*                                                              */
/*                                                              */
/*  for tw114 jjw 11/12/88                                      */
/*  add fgetc for sun jjw 2/27/89                               */
/*                                                              */
/****************************************************************/

#include  <stdio.h>


#ifndef SIMULATOR
#include  "twcommon.h"
#include  "twsys.h"
#endif

#include "machdep.h"

#ifndef FUNCTION
#define FUNCTION
#endif



#ifdef BF_PLUS

#define NET_BUF_LEN     4096

typedef struct BBN_FCB
{
	FILE * fp;
	int buff_ctr;
	char * buff_ptr;
	char buff[100];
}HOST_FCB;

HOST_FCB host_fcb[20];

char host_wd[60] = "";
#endif

#ifdef MARK3_OR_SUN_OR_BF_MACH
char host_wd[60];
#endif

#ifdef TRANSPUTER 
char host_wd[60];
#endif




FUNCTION FILE  * HOST_fopen ( name, mode )

	char * name;
	char * mode;
{
	FILE * fp;
	char path[100];

#ifdef BF_PLUS
   FILE *n_open();
   HOST_FCB * fcb_ptr;
#endif

/**********************************************************/
/* If the caller is already giving us the full path then  */
/* just pass it on. If not then concatenate the file name */
/* to the path given in "host_wd".                        */
/**********************************************************/

#ifdef MARK3
/* The MARK3 requires the preface of "cp:" on its path    */
/* names.                                                 */

   if ( strncmp ( name, "cp:", 3 ) == 0 )
	{
		strcpy ( path, name );
	}

   else
	{
	   strcpy ( path, host_wd );
	   strcat ( path, name );
	}
#else
	   strcpy ( path, host_wd );
	   strcat ( path, name );
#endif


#ifdef TRANSPUTER

	SEMGET;
	fp = fopen ( path, mode );
	SEMFREE;    

#endif

#ifdef BF_PLUS 

	for ( fcb_ptr = host_fcb; fcb_ptr->fp != 0; fcb_ptr++ )
		;

	fp = n_open ( path, mode );
	fcb_ptr->fp = fp;
	fcb_ptr->buff_ctr = 0;
#endif

#ifdef MARK3_OR_SUN_OR_BF_MACH
	fp = fopen ( path, mode );
#endif

	return ( fp );
}

FUNCTION HOST_fclose ( fp )

	FILE * fp;
{

#ifdef TRANSPUTER

	SEMGET;
	fclose ( fp );
	SEMFREE;

#endif

#ifdef BF_PLUS 
	HOST_FCB * fcb_ptr;

	for ( fcb_ptr = host_fcb; fcb_ptr->fp != fp; fcb_ptr++ )
		;

	fcb_ptr->fp = 0;

	n_close ( fp );
#endif

#ifdef MARK3_OR_SUN_OR_BF_MACH
	fclose ( fp );
#endif


}


FUNCTION HOST_fwrite  ( ptr, size, nitems, stream )
char *ptr;
int  size, nitems;
FILE *stream;

{


#ifdef MARK3_OR_SUN_OR_BF_MACH

   fwrite ( ptr, size, nitems, stream );

#endif


#ifdef TRANSPUTER

	SEMGET;
	fwrite ( ptr, size, nitems, stream );
	SEMFREE;

#endif
 

#ifdef BF_PLUS
   int  i;

	for ( i=0; i< (size / NET_BUF_LEN ); i++ )
	 {
		 n_write ( stream, 
				   ( ptr + (NET_BUF_LEN * i)),
					 NET_BUF_LEN 
				 );
	 }
	n_write ( stream,
			  ( ptr + (NET_BUF_LEN *i) ),
			  ( size  % NET_BUF_LEN ) 
			);
				  
#endif


}



FUNCTION HOST_fprintf
		 ( fp, 
		   form, 
			arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10,
			arg11, arg12, arg13, arg14, arg15 
		 )
	FILE *fp;
	char * form;
	int *arg1, *arg2, *arg3, *arg4, *arg5, *arg6, *arg7, *arg8, *arg9,
		*arg10, *arg11, *arg12, *arg13, *arg14, *arg15;

{

	static char buff[256];

	sprintf ( buff,
				form, arg1, arg2, arg3, arg4, arg5,
				arg6, arg7, arg8, arg9, arg10,
				arg11, arg12, arg13, arg14, arg15 );
	HOST_fputs ( buff, fp );

	HOST_fflush ( fp );

 

}

 


FUNCTION HOST_fputs ( buff, fp )

	char * buff;
	FILE * fp;
{

#ifdef TRANSPUTER

	SEMGET;
	fputs ( buff, fp );
	SEMFREE;

#endif

#ifdef BF_PLUS
   int  i;

	for ( i=0; i< (strlen (buff) / NET_BUF_LEN ); i++ )
	 {
		 n_write ( fp, 
				   ( buff + (NET_BUF_LEN * i)),
					 NET_BUF_LEN 
				 );
	 }
	n_write ( fp,
			  ( buff + (NET_BUF_LEN *i) ),
			  ( ( strlen ( (buff + (NET_BUF_LEN *i ) ) ) )
				 % NET_BUF_LEN )
			);
				  
#endif

#ifdef MARK3_OR_SUN_OR_BF_MACH
	fputs ( buff, fp );
#endif



}

FUNCTION int HOST_fgets ( buff, size, fp )

	char * buff;
	int size;
	FILE * fp;
{
	int stat;

#ifdef TRANSPUTER

	SEMGET;
	stat = fgets ( buff, size, fp );
	SEMFREE;

#endif

#ifdef BF_PLUS
	char * rtn_ptr = buff;
	char * buff_ptr;
	int buff_ctr;
	HOST_FCB * fcb_ptr;

	for ( fcb_ptr = host_fcb; fcb_ptr->fp != fp; fcb_ptr++ )
		;

	buff_ctr = fcb_ptr->buff_ctr;
	buff_ptr = fcb_ptr->buff_ptr;
	stat = 0;

	for ( ;; )
	{
		if ( buff_ctr == 0 )
		{
			buff_ptr = &fcb_ptr->buff[0];
			buff_ctr = n_read ( fp, buff_ptr, 100 );
			if ( buff_ctr == 0 )
				break;
		}
		buff_ctr--;
		*rtn_ptr++ = *buff_ptr;
		stat++;

		if ( *buff_ptr++ == '\n' )
		{
			*rtn_ptr = 0;
			break;
		}
	}

	fcb_ptr->buff_ptr = buff_ptr;
	fcb_ptr->buff_ctr = buff_ctr;
#endif

#ifdef MARK3_OR_SUN_OR_BF_MACH
	stat = fgets ( buff, size, fp );
#endif


	return ( stat );
}

FUNCTION HOST_fflush ( fp )

	FILE * fp;
{

#ifdef TRANSPUTER

	 SEMGET;
	 fflush ( fp );
	 SEMFREE;

#endif

#ifdef BF_PLUS  /* Alas ! The Butterfly+  does not have fflush */
#endif


#ifdef MARK3_OR_SUN_OR_BF_MACH 
	fflush ( fp );
#endif


}

int FUNCTION HOST_fgetc( fp )

	FILE * fp;
{
#ifdef SUN
	return( fgetc(fp) );
#endif

#ifdef MARK3_OR_SUN_OR_BF_MACH
	return( fgetc(fp) );
#endif

#ifdef BF_PLUS



	char  buffch = 0;
	int buff_ctr;
	HOST_FCB * fcb_ptr;

	for ( fcb_ptr = host_fcb; fcb_ptr->fp != fp; fcb_ptr++ )
		;

	buff_ctr = fcb_ptr->buff_ctr;

	if ( buff_ctr > 0 ) buff_ctr = n_read ( fp, &buffch, 1 );
		else return(-1);

	if (buff_ctr <= 0) return(-1);
	return(buffch);


#endif
}


int FUNCTION HOST_fputc( xx,fp )

   char xx;
   FILE * fp;
{
#ifdef MARK3_OR_SUN_OR_BF_MACH
	 fputc(xx, fp) ;
#endif

#ifdef BF_PLUS
	int buff_ctr;
	HOST_FCB * fcb_ptr;

	for ( fcb_ptr = host_fcb; fcb_ptr->fp != fp; fcb_ptr++ )
		;

	buff_ctr = fcb_ptr->buff_ctr;

	buff_ctr = n_write ( fp, &xx, 1 );

	return(xx);
#endif
}

@


1.2
log
@Tab conversion.
@
text
@d1 4
d6 4
a9 1
 * $Log:        HOST_fileio.c,v $
d14 1
a14 3
/* "Copyright (C) 1989, California Institute of Technology. 
	 U. S. Government Sponsorship under NASA Contract 
   NAS7-918 is acknowledged." */
@


1.1
log
@Initial revision
@
text
@d2 4
a5 1
 * $Log$
d8 1
a8 1
     U. S. Government Sponsorship under NASA Contract 
d11 11
a21 11
/*  HOST_fileio.c			10-01-88 pjh		*/
/*								*/
/*  This module provides a series of host computer file I/O	*/
/*  functions for the TRANSPUTER, The Butterfly Plus running	*/
/*  Chrysalis, the BBN GP1000 running MACH, SUN workstations 	*/
/*  runnint BSD Unix and the Mark 3 hypercube.			*/
/*  The purpose of these functions is to centralize all of the	*/
/*  machine dependent code dealing with the file I/O of 	*/
/*  the various systems. Hence making the Time Warp & the	*/
/*  Time Warp Simulator code alot cleaner.			*/
/*								*/
d23 12
a34 12
/*  is established at TW init time by the run program.		*/
/*  If no initialization is made or <if we are using this for	*/
/*  the simulator, all files will be made on cwd. JJW 1/23/89>	*/
/*								*/
/*  For the Butterfly Plus running Chrysalis, there is no	*/
/*  easy way to determine the working directory. So, it is	*/
/*  currently implemented as a compile time constant.		*/
/*								*/
/*								*/
/*  for tw114 jjw 11/12/88					*/
/*  add fgetc for sun jjw 2/27/89				*/
/*								*/
d55 1
a55 1
#define NET_BUF_LEN	4096
d59 4
a62 4
    FILE * fp;
    int buff_ctr;
    char * buff_ptr;
    char buff[100];
d83 2
a84 2
    char * name;
    char * mode;
d86 2
a87 2
    FILE * fp;
    char path[100];
d97 1
a97 1
/* to the path given in "host_wd".			  */
d102 1
a102 1
/* names.						  */
d105 3
a107 3
    {
        strcpy ( path, name );
    }
d110 4
a113 4
    {
       strcpy ( path, host_wd );
       strcat ( path, name );
    }
d115 2
a116 2
       strcpy ( path, host_wd );
       strcat ( path, name );
d122 3
a124 3
    SEMGET;
    fp = fopen ( path, mode );
    SEMFREE;    
d130 2
a131 2
    for ( fcb_ptr = host_fcb; fcb_ptr->fp != 0; fcb_ptr++ )
	;
d133 3
a135 3
    fp = n_open ( path, mode );
    fcb_ptr->fp = fp;
    fcb_ptr->buff_ctr = 0;
d139 1
a139 1
    fp = fopen ( path, mode );
d142 1
a142 1
    return ( fp );
d147 1
a147 1
    FILE * fp;
d152 3
a154 3
    SEMGET;
    fclose ( fp );
    SEMFREE;
d159 1
a159 1
    HOST_FCB * fcb_ptr;
d161 2
a162 2
    for ( fcb_ptr = host_fcb; fcb_ptr->fp != fp; fcb_ptr++ )
	;
d164 1
a164 1
    fcb_ptr->fp = 0;
d166 1
a166 1
    n_close ( fp );
d170 1
a170 1
    fclose ( fp );
d194 3
a196 3
    SEMGET;
    fwrite ( ptr, size, nitems, stream );
    SEMFREE;
d202 1
a202 1
   int	i;
d204 12
a215 12
    for ( i=0; i< (size / NET_BUF_LEN ); i++ )
     {
         n_write ( stream, 
		   ( ptr + (NET_BUF_LEN * i)),
		     NET_BUF_LEN 
		 );
     }
    n_write ( stream,
	      ( ptr + (NET_BUF_LEN *i) ),
	      (	size  % NET_BUF_LEN ) 
	    );
		  
d224 9
a232 9
	 ( fp, 
	   form, 
	    arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10,
            arg11, arg12, arg13, arg14, arg15 
	 )
    FILE *fp;
    char * form;
    int *arg1, *arg2, *arg3, *arg4, *arg5, *arg6, *arg7, *arg8, *arg9,
	*arg10, *arg11, *arg12, *arg13, *arg14, *arg15;
d236 1
a236 1
    static char buff[256];
d238 5
a242 5
    sprintf ( buff,
                form, arg1, arg2, arg3, arg4, arg5,
                arg6, arg7, arg8, arg9, arg10,
                arg11, arg12, arg13, arg14, arg15 );
    HOST_fputs ( buff, fp );
d244 1
a244 1
    HOST_fflush ( fp );
d255 2
a256 2
    char * buff;
    FILE * fp;
d261 3
a263 3
    SEMGET;
    fputs ( buff, fp );
    SEMFREE;
d268 1
a268 1
   int	i;
d270 13
a282 13
    for ( i=0; i< (strlen (buff) / NET_BUF_LEN ); i++ )
     {
         n_write ( fp, 
		   ( buff + (NET_BUF_LEN * i)),
		     NET_BUF_LEN 
		 );
     }
    n_write ( fp,
	      ( buff + (NET_BUF_LEN *i) ),
	      ( ( strlen ( (buff + (NET_BUF_LEN *i ) ) ) )
		 % NET_BUF_LEN )
	    );
		  
d286 1
a286 1
    fputs ( buff, fp );
d295 3
a297 3
    char * buff;
    int size;
    FILE * fp;
d299 1
a299 1
    int stat;
d303 3
a305 3
    SEMGET;
    stat = fgets ( buff, size, fp );
    SEMFREE;
d310 4
a313 4
    char * rtn_ptr = buff;
    char * buff_ptr;
    int buff_ctr;
    HOST_FCB * fcb_ptr;
d315 2
a316 2
    for ( fcb_ptr = host_fcb; fcb_ptr->fp != fp; fcb_ptr++ )
	;
d318 3
a320 3
    buff_ctr = fcb_ptr->buff_ctr;
    buff_ptr = fcb_ptr->buff_ptr;
    stat = 0;
d322 1
a322 3
    for ( ;; )
    {
	if ( buff_ctr == 0 )
d324 10
a333 8
	    buff_ptr = &fcb_ptr->buff[0];
	    buff_ctr = n_read ( fp, buff_ptr, 100 );
	    if ( buff_ctr == 0 )
		break;
	}
	buff_ctr--;
	*rtn_ptr++ = *buff_ptr;
	stat++;
d335 5
a339 4
	if ( *buff_ptr++ == '\n' )
	{
	    *rtn_ptr = 0;
	    break;
a340 1
    }
d342 2
a343 2
    fcb_ptr->buff_ptr = buff_ptr;
    fcb_ptr->buff_ctr = buff_ctr;
d347 1
a347 1
    stat = fgets ( buff, size, fp );
d351 1
a351 1
    return ( stat );
d356 1
a356 1
    FILE * fp;
d361 3
a363 3
     SEMGET;
     fflush ( fp );
     SEMFREE;
d372 1
a372 1
    fflush ( fp );
d380 1
a380 1
    FILE * fp;
d383 1
a383 1
    return( fgetc(fp) );
d387 1
a387 1
    return( fgetc(fp) );
d394 3
a396 3
    char  buffch = 0;
    int buff_ctr;
    HOST_FCB * fcb_ptr;
d398 2
a399 2
    for ( fcb_ptr = host_fcb; fcb_ptr->fp != fp; fcb_ptr++ )
	;
d401 1
a401 1
    buff_ctr = fcb_ptr->buff_ctr;
d403 2
a404 2
    if ( buff_ctr > 0 ) buff_ctr = n_read ( fp, &buffch, 1 );
	else return(-1);
d406 2
a407 2
    if (buff_ctr <= 0) return(-1);
    return(buffch);
d420 1
a420 1
     fputc(xx, fp) ;
d424 2
a425 2
    int buff_ctr;
    HOST_FCB * fcb_ptr;
d427 2
a428 2
    for ( fcb_ptr = host_fcb; fcb_ptr->fp != fp; fcb_ptr++ )
        ;
d430 1
a430 1
    buff_ctr = fcb_ptr->buff_ctr;
d432 1
a432 1
    buff_ctr = n_write ( fp, &xx, 1 );
d434 1
a434 1
    return(xx);
@

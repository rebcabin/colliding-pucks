head     1.3;
branch   ;
access   ;
symbols  TW2_7:1.3 TW2_6:1.3 TW2_5_1:1.3 TW2_5:1.2 TW2_4_2:1.1 TW2_4_1:1.1 TW2_4:1.1;
locks    ; strict;
comment  @ * @;


1.3
date     91.07.17.15.14.09;  author judy;  state Rel;
branches ;
next     1.2;

1.2
date     91.06.03.12.27.32;  author configtw;  state Rel;
branches ;
next     1.1;

1.1
date     90.08.07.15.41.43;  author configtw;  state Rel;
branches ;
next     ;


desc
@virtual time support code
@


1.3
log
@New copyright notice.
@
text
@/*      Copyright (C) 1989, 1991, California Institute of Technology.
		U. S. Government Sponsorship under NASA Contract NAS7-918
		is acknowledged.        */

/*
 * $Log:	vtime.c,v $
 * Revision 1.2  91/06/03  12:27:32  configtw
 * Tab conversion.
 * 
 * Revision 1.1  90/08/07  15:41:43  configtw
 * Initial revision
 * 
*/
char vtime_id [] = "@@(#)vtime.c 1.5\t9/27/89\t15:54:23\tTIMEWARP";


#include "twcommon.h"

VTime newVTime ( aSimTime, aSequence1, aSequence2 )

	STime aSimTime;
	Ulong aSequence1;
	Ulong aSequence2;
{
	VTime aVTime;

	aVTime.simtime = aSimTime;
	aVTime.sequence1 = aSequence1;
	aVTime.sequence2 = aSequence2;

	return ( aVTime );
}


VTime SetSimTime ( aVTime, aSimTime )

	VTime aVTime;
	STime aSimTime;
{
	aVTime.simtime = aSimTime;
	return ( aVTime );
}

VTime SetSequence1 ( aVTime, aSequence1 )

	VTime aVTime;
	Ulong aSequence1;
{
	aVTime.sequence1 = aSequence1;
	return ( aVTime );
}

VTime SetSequence2 ( aVTime, aSequence2 )

	VTime aVTime;
	Ulong aSequence2;
{
	aVTime.sequence2 = aSequence2;
	return ( aVTime );
}

VTime sscanVTime ( aString )

	char * aString;
{
	VTime aVTime;

	sscanf ( aString, "%lf, %ld, %ld",
		&aVTime.simtime,
		&aVTime.sequence1,
		&aVTime.sequence2 );

	return ( aVTime );
}

sprintVTime ( aString, aVTime )

	char * aString;
	VTime aVTime;
{
	sprintf ( aString, "%f %d %d",
		aVTime.simtime,
		aVTime.sequence1,
		aVTime.sequence2 );
}

#ifndef FAST_VTIME_MACROS


gtSTime ( a, b )

STime a,b;
{
   if ( a > b ) 
		return TRUE; 
   else
		return FALSE;

}

ltSTime ( a, b )

STime a,b;
{
   if ( a < b ) 
		return TRUE;
   else
		return FALSE;
}

geSTime ( a, b )

STime a,b;
{
   if ( a >= b ) 
		return TRUE; 
   else 
		return FALSE;

}

leSTime ( a, b )

STime a,b;
{
   if ( a <= b ) 
		return TRUE; 
   else
		return FALSE ;

}

eqSTime ( a, b )

STime a,b;
{
   if ( a == b ) 
		return TRUE; 
   else
		return FALSE;

}

neSTime ( a, b )

STime a,b;
{
   if ( a != b ) 
		return TRUE; 
   else
		return FALSE;

}

#endif

@


1.2
log
@Tab conversion.
@
text
@d1 4
d6 4
a9 1
 * $Log:        vtime.c,v $
a15 3
/*      Copyright (C) 1989, California Institute of Technology.
		U. S. Government Sponsorship under NASA Contract NAS7-918
		is acknowledged.        */
@


1.1
log
@Initial revision
@
text
@d2 4
a5 1
 * $Log$
d7 1
a7 1
char vtime_id [] = "@@(#)vtime.c	1.5\t9/27/89\t15:54:23\tTIMEWARP";
d10 2
a11 2
        U. S. Government Sponsorship under NASA Contract NAS7-918
        is acknowledged.        */
d17 3
a19 3
    STime aSimTime;
    Ulong aSequence1;
    Ulong aSequence2;
d21 1
a21 1
    VTime aVTime;
d23 3
a25 3
    aVTime.simtime = aSimTime;
    aVTime.sequence1 = aSequence1;
    aVTime.sequence2 = aSequence2;
d27 1
a27 1
    return ( aVTime );
d33 2
a34 2
    VTime aVTime;
    STime aSimTime;
d36 2
a37 2
    aVTime.simtime = aSimTime;
    return ( aVTime );
d42 2
a43 2
    VTime aVTime;
    Ulong aSequence1;
d45 2
a46 2
    aVTime.sequence1 = aSequence1;
    return ( aVTime );
d51 2
a52 2
    VTime aVTime;
    Ulong aSequence2;
d54 2
a55 2
    aVTime.sequence2 = aSequence2;
    return ( aVTime );
d60 1
a60 1
    char * aString;
d62 1
a62 1
    VTime aVTime;
d64 4
a67 4
    sscanf ( aString, "%lf, %ld, %ld",
	&aVTime.simtime,
	&aVTime.sequence1,
	&aVTime.sequence2 );
d69 1
a69 1
    return ( aVTime );
d74 2
a75 2
    char * aString;
    VTime aVTime;
d77 4
a80 4
    sprintf ( aString, "%f %d %d",
	aVTime.simtime,
	aVTime.sequence1,
	aVTime.sequence2 );
d91 1
a91 1
	return TRUE; 
d93 1
a93 1
	return FALSE;
d102 1
a102 1
	return TRUE;
d104 1
a104 1
	return FALSE;
d112 3
a114 3
	return TRUE; 
   else	
	return FALSE;
d123 1
a123 1
	return TRUE; 
d125 1
a125 1
	return FALSE ;
d134 1
a134 1
	return TRUE; 
d136 1
a136 1
	return FALSE;
d145 1
a145 1
	return TRUE; 
d147 1
a147 1
     	return FALSE;
@

head     1.3;
branch   ;
access   ;
symbols  TW2_7:1.3 TW2_6:1.3 TW2_5_1:1.3 TW2_5:1.2 TW2_4_2:1.1 TW2_4_1:1.1 TW2_4:1.1;
locks    ; strict;
comment  @ * @;


1.3
date     91.07.17.15.14.14;  author judy;  state Rel;
branches ;
next     1.2;

1.2
date     91.06.03.12.27.34;  author configtw;  state Rel;
branches ;
next     1.1;

1.1
date     90.08.07.15.41.45;  author configtw;  state Rel;
branches ;
next     ;


desc
@virtual time includes
@


1.3
log
@New copyright notice.
@
text
@/*      Copyright (C) 1989, 1991, California Institute of Technology.
		U. S. Government Sponsorship under NASA Contract NAS7-918
		is acknowledged.        */

/*
 * $Log:	vtime.h,v $
 * Revision 1.2  91/06/03  12:27:34  configtw
 * Tab conversion.
 * 
 * Revision 1.1  90/08/07  15:41:45  configtw
 * Initial revision
 * 
*/

#define GetSimTime(a) (a.simtime)

#define GetSequence1(a) (a.sequence1)

#define GetSequence2(a) (a.sequence2)


#define gtDTime(a1,a2,b1,b2) \
( \
	( a1 > b1 ) || \
	( a1 == b1 && a2 > b2 ) \
)

#define geDTime(a1,a2,b1,b2) \
( \
	( a1 > b1 ) || \
	( a1 == b1 && a2 >= b2 ) \
)

#define ltDTime(a1,a2,b1,b2) \
( \
	( a1 < b1 ) || \
	( a1 == b1 && a2 < b2 ) \
)

#define leDTime(a1,a2,b1,b2) \
( \
	( a1 < b1 ) || \
	( a1 == b1 && a2 <= b2 ) \
)

#define eqDTime(a1,a2,b1,b2) \
( \
	a1 == b1 && a2 == b2 \
)

#define neDTime(a1,a2,b1,b2) \
( \
	a1 != b1 || a2 != b2 \
)

#ifdef FAST_VTIME_MACROS

#define bothNeg(a,b) \
( \
	( *((int *)&a) & *((int *)&b) ) < 0 \
)

#define gtSTime(a,b) \
( \
	bothNeg(a,b) \
	? ltDTime(*((int *)&a),*(((Uint *)&a)+1),*((int *)&b),*(((Uint *)&b)+1)) \
	: gtDTime(*((int *)&a),*(((Uint *)&a)+1),*((int *)&b),*(((Uint *)&b)+1)) \
)

#define geSTime(a,b) \
( \
	bothNeg(a,b) \
	? leDTime(*((int *)&a),*(((Uint *)&a)+1),*((int *)&b),*(((Uint *)&b)+1)) \
	: geDTime(*((int *)&a),*(((Uint *)&a)+1),*((int *)&b),*(((Uint *)&b)+1)) \
)

#define ltSTime(a,b) \
( \
	bothNeg(a,b) \
	? gtDTime(*((int *)&a),*(((Uint *)&a)+1),*((int *)&b),*(((Uint *)&b)+1)) \
	: ltDTime(*((int *)&a),*(((Uint *)&a)+1),*((int *)&b),*(((Uint *)&b)+1)) \
)

#define leSTime(a,b) \
( \
	bothNeg(a,b) \
	? geDTime(*((int *)&a),*(((Uint *)&a)+1),*((int *)&b),*(((Uint *)&b)+1)) \
	: leDTime(*((int *)&a),*(((Uint *)&a)+1),*((int *)&b),*(((Uint *)&b)+1)) \
)

#define eqSTime(a,b) \
( \
	*((int *)&a) == *((int *)&b) && *(((int *)&a)+1) == *(((int *)&b)+1) \
)

#define neSTime(a,b) \
( \
	*((int *)&a) != *((int *)&b) || *(((int *)&a)+1) != *(((int *)&b)+1) \
)

#endif


#define gtVTime(a,b) \
( \
	gtSTime(a.simtime,b.simtime) || \
	( eqSTime(a.simtime,b.simtime) && \
		gtDTime(a.sequence1,a.sequence2,b.sequence1,b.sequence2) ) \
)

#define geVTime(a,b) \
( \
	gtSTime(a.simtime,b.simtime) || \
	( eqSTime(a.simtime,b.simtime) && \
		geDTime(a.sequence1,a.sequence2,b.sequence1,b.sequence2) ) \
)

#define ltVTime(a,b) \
( \
	ltSTime(a.simtime,b.simtime) || \
	( eqSTime(a.simtime,b.simtime) && \
		ltDTime(a.sequence1,a.sequence2,b.sequence1,b.sequence2) ) \
)

#define leVTime(a,b) \
( \
	ltSTime(a.simtime,b.simtime) || \
	( eqSTime(a.simtime,b.simtime) && \
		leDTime(a.sequence1,a.sequence2,b.sequence1,b.sequence2) ) \
)

#define eqVTime(a,b) \
( \
	eqSTime(a.simtime,b.simtime) && \
	eqDTime(a.sequence1,a.sequence2,b.sequence1,b.sequence2) \
)

#define neVTime(a,b) \
( \
	neSTime(a.simtime,b.simtime) || \
	neDTime(a.sequence1,a.sequence2,b.sequence1,b.sequence2) \
)
@


1.2
log
@Tab conversion.
@
text
@d1 4
d6 4
a9 1
 * $Log:        vtime.h,v $
a13 3
/*      Copyright (C) 1989, California Institute of Technology.
		U. S. Government Sponsorship under NASA Contract NAS7-918
		is acknowledged.        */
@


1.1
log
@Initial revision
@
text
@d2 4
a5 1
 * $Log$
d7 3
a9 3
/*	Copyright (C) 1989, California Institute of Technology.
	U. S. Government Sponsorship under NASA Contract NAS7-918
	is acknowledged.	*/
d20 2
a21 2
    ( a1 > b1 ) || \
    ( a1 == b1 && a2 > b2 ) \
d26 2
a27 2
    ( a1 > b1 ) || \
    ( a1 == b1 && a2 >= b2 ) \
d32 2
a33 2
    ( a1 < b1 ) || \
    ( a1 == b1 && a2 < b2 ) \
d38 2
a39 2
    ( a1 < b1 ) || \
    ( a1 == b1 && a2 <= b2 ) \
d44 1
a44 1
    a1 == b1 && a2 == b2 \
d49 1
a49 1
    a1 != b1 || a2 != b2 \
d56 1
a56 1
    ( *((int *)&a) & *((int *)&b) ) < 0 \
d61 3
a63 3
    bothNeg(a,b) \
    ? ltDTime(*((int *)&a),*(((Uint *)&a)+1),*((int *)&b),*(((Uint *)&b)+1)) \
    : gtDTime(*((int *)&a),*(((Uint *)&a)+1),*((int *)&b),*(((Uint *)&b)+1)) \
d68 3
a70 3
    bothNeg(a,b) \
    ? leDTime(*((int *)&a),*(((Uint *)&a)+1),*((int *)&b),*(((Uint *)&b)+1)) \
    : geDTime(*((int *)&a),*(((Uint *)&a)+1),*((int *)&b),*(((Uint *)&b)+1)) \
d75 3
a77 3
    bothNeg(a,b) \
    ? gtDTime(*((int *)&a),*(((Uint *)&a)+1),*((int *)&b),*(((Uint *)&b)+1)) \
    : ltDTime(*((int *)&a),*(((Uint *)&a)+1),*((int *)&b),*(((Uint *)&b)+1)) \
d82 3
a84 3
    bothNeg(a,b) \
    ? geDTime(*((int *)&a),*(((Uint *)&a)+1),*((int *)&b),*(((Uint *)&b)+1)) \
    : leDTime(*((int *)&a),*(((Uint *)&a)+1),*((int *)&b),*(((Uint *)&b)+1)) \
d89 1
a89 1
    *((int *)&a) == *((int *)&b) && *(((int *)&a)+1) == *(((int *)&b)+1) \
d94 1
a94 1
    *((int *)&a) != *((int *)&b) || *(((int *)&a)+1) != *(((int *)&b)+1) \
d102 3
a104 3
    gtSTime(a.simtime,b.simtime) || \
    ( eqSTime(a.simtime,b.simtime) && \
	gtDTime(a.sequence1,a.sequence2,b.sequence1,b.sequence2) ) \
d109 3
a111 3
    gtSTime(a.simtime,b.simtime) || \
    ( eqSTime(a.simtime,b.simtime) && \
	geDTime(a.sequence1,a.sequence2,b.sequence1,b.sequence2) ) \
d116 3
a118 3
    ltSTime(a.simtime,b.simtime) || \
    ( eqSTime(a.simtime,b.simtime) && \
	ltDTime(a.sequence1,a.sequence2,b.sequence1,b.sequence2) ) \
d123 3
a125 3
    ltSTime(a.simtime,b.simtime) || \
    ( eqSTime(a.simtime,b.simtime) && \
	leDTime(a.sequence1,a.sequence2,b.sequence1,b.sequence2) ) \
d130 2
a131 2
    eqSTime(a.simtime,b.simtime) && \
    eqDTime(a.sequence1,a.sequence2,b.sequence1,b.sequence2) \
d136 2
a137 2
    neSTime(a.simtime,b.simtime) || \
    neDTime(a.sequence1,a.sequence2,b.sequence1,b.sequence2) \
@
